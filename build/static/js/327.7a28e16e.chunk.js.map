{"version":3,"file":"static/js/327.7a28e16e.chunk.js","mappings":"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","sources":["components/Messaging/Room/UserSearch.js","components/Messaging/Room/RoomItem.js","socket.js","components/Messaging/Room/RoomList.js","components/Messaging/Room/UserProfile.js","components/Messaging/Room/Room.js","components/Messaging/Chat/MessageForm.js","components/Messaging/Chat/ChatItem.js","components/Messaging/Chat/ChatList.js","pages/MessagingPage.js","urls.js","utils/checkToken.js","utils/cookie.js","utils/themeUtils.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { RefreshToken } from \"../../../utils/checkToken\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { getCookie } from '../../../utils/cookie';\r\n//cập nhật thông tin khi người dùng được chọn\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatInfo } from '../../../redux/slices/chatSlice';\r\nconst url = require(\"../../../urls\");\r\n\r\nconst UserSearch = ({ searchText, setIsSearching }) => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [users, setUsers] = useState([]); // Dữ liệu người dùng\r\n    const [currentPage, setCurrentPage] = useState(1); // Trang hiện tại\r\n    const [totalPages, setTotalPages] = useState(1); // Tổng số trang\r\n    const [loading, setLoading] = useState(false); // Trạng thái tải dữ liệu\r\n    const [hasMore, setHasMore] = useState(true); // Kiểm tra còn dữ liệu để tải không\r\n    const [titleError, setTitleError] = useState(); // Dữ liệu người dùng\r\n    const scrollContainerRef = useRef(null);\r\n\r\n    const fetchUsers = async (page = 1, append = false, isRetry = false) => {\r\n        if (!searchText.trim()) return;\r\n        setLoading(true);\r\n        setTitleError();\r\n        try {\r\n            const response = await axios.get(url.searchUser, {\r\n                params: {\r\n                    search: searchText,\r\n                    page,\r\n                    limit: 20,\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${getCookie('accessToken')}`, // Thêm token vào header\r\n                },\r\n            });\r\n\r\n            const { users: newUsers, totalPages, currentPage } = response.data;\r\n\r\n            setUsers((prev) => (append ? [...prev, ...newUsers] : newUsers));\r\n            setCurrentPage(currentPage);\r\n            setTotalPages(totalPages);\r\n\r\n            setHasMore(currentPage < totalPages); // Nếu chưa đến trang cuối, còn tải\r\n        } catch (error) {\r\n            if (error.status === 404) {\r\n                setUsers([]);\r\n                setHasMore(true)\r\n                setTitleError(error.response.data.message)\r\n            } else if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                const resultRefreshToken = await RefreshToken();\r\n                if (resultRefreshToken.success) {\r\n                    return fetchUsers(page, append, true);\r\n                } else navigate('/');\r\n            }\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const debouncedFetch = _.debounce(() => fetchUsers(1, false), 500);\r\n\r\n        if (searchText.trim()) {\r\n            debouncedFetch(); // Chỉ gọi debounce khi có dữ liệu\r\n        }\r\n\r\n        // Cleanup debounce để tránh memory leak\r\n        return () => debouncedFetch.cancel();\r\n    }, [searchText]);\r\n\r\n    // Xử lý cuộn để tải thêm\r\n    const handleScroll = () => {\r\n        const container = scrollContainerRef.current;\r\n        if (\r\n            container &&\r\n            container.scrollTop + container.clientHeight >= container.scrollHeight - 100 &&\r\n            !loading &&\r\n            hasMore\r\n        ) {\r\n            fetchUsers(currentPage + 1, true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const container = scrollContainerRef.current;\r\n\r\n        if (container) {\r\n            container.addEventListener(\"scroll\", handleScroll);\r\n        }\r\n\r\n        return () => {\r\n            if (container) {\r\n                container.removeEventListener(\"scroll\", handleScroll);\r\n            }\r\n        };\r\n    }, [loading, hasMore, currentPage]);\r\n\r\n    // tạo phòng chat khi click vào người dùng\r\n    const handleCreateRoom = async (targetUserId, isRetry = false, userName = null, profilePicture = null, email = null) => {\r\n        setLoading(true);\r\n        setTitleError();\r\n        try {\r\n            const response = await axios.post(url.createRoom, { targetUserId }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${getCookie('accessToken')}`, // Thêm token vào header\r\n                },\r\n            });\r\n            if (response.data.success === true) {\r\n                dispatch(setChatInfo({\r\n                    roomId: response.data.roomId,\r\n                    profilePicture: profilePicture,\r\n                    userName: userName,\r\n                    email: email\r\n                }));\r\n                setIsSearching(false)\r\n            }\r\n\r\n        } catch (error) {\r\n            if (error.status === 400) {\r\n                dispatch(setChatInfo({\r\n                    roomId: error.response.data.roomId,\r\n                    profilePicture: profilePicture,\r\n                    userName: userName,\r\n                    email: email\r\n                }));\r\n                setIsSearching(false)\r\n                //chuyển đến tab nhắn tin\r\n            }\r\n            else if (error.status === 404) {\r\n                setTitleError(error.response.data.message)\r\n            } else if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                const resultRefreshToken = await RefreshToken();\r\n                if (resultRefreshToken.success) {\r\n                    return fetchUsers(targetUserId, true);\r\n                } else navigate('/');\r\n            }else setTitleError(error.response.data.message)\r\n\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    return (\r\n        <div\r\n            ref={scrollContainerRef}\r\n            style={{ height: '100%', maxHeight: '100%', overflowY: 'auto' }}>\r\n            {/* <h3>Kết quả tìm kiếm:</h3> */}\r\n            <h3></h3>\r\n            <ul>\r\n                {users.map((user) => (\r\n                    <div className=\"room-item d-flex align-items-center p-2\"\r\n                        onClick={() => handleCreateRoom(user.userId, false, user.userName, user.profilePicture, user.email)}\r\n                    >\r\n                        {/* Hình ảnh bên trái */}\r\n                        <div className=\"room-image\">\r\n                            <img\r\n                                src={user.profilePicture}\r\n                                alt={user.userName || 'user Image'}\r\n                                className=\"img-fluid rounded-circle\"\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Phần nội dung bên phải */}\r\n                        <div className=\"room-content flex-grow-1 ms-3\">\r\n                            {/* Tên người dùng hoặc tên phòng */}\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <h5 className=\"mb-0 text-truncate\">{user.userName || user.roomName || 'Phòng chat'}</h5>\r\n                                {/* Thời gian tin nhắn */}\r\n                                {/* <small className=\"text-muted\">{user.lastMessageTime}</small> */}\r\n                            </div>\r\n\r\n                            {/* Tin nhắn cuối cùng và số lượng chưa đọc */}\r\n                            <div className=\"d-flex justify-content-between align-items-center mt-1\">\r\n                                <p className=\"mb-0 text-truncate text-muted\">\r\n                                    {user.email}\r\n                                </p>\r\n                                {/* {user.unreadMessagesCount > 0 && (\r\n                          <span className=\"badge bg-danger rounded-pill unread-count\">\r\n                            {user.unreadMessagesCount}\r\n                          </span>\r\n                        )} */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </ul>\r\n            {loading && (\r\n                <div className=\"text-center\">\r\n                    <div className=\"spinner-border text-primary\" role=\"status\">\r\n                        <span className=\"visually-hidden\">Đang tải...</span>\r\n                    </div>\r\n                    <p>Đang tải...</p>\r\n                </div>\r\n            )}\r\n\r\n\r\n            {titleError && <h4 className=\"text-center text-danger\">{titleError}</h4>}\r\n            {(!hasMore && totalPages !=1) && <h5 className=\"text-center text-primary\">Đã hiển thị tất cả kết quả.</h5>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserSearch;\r\n","// src/components/Room/RoomItem.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatInfo } from '../../../redux/slices/chatSlice';\r\nimport { useSelector } from 'react-redux';\r\nconst RoomItem = ({ room, handleSelectView, isMobile }) => {\r\n  const dispatch = useDispatch();\r\n  const chatInfo = useSelector((state) => state.chat);\r\n  return (\r\n    <div className=\"room-item d-flex align-items-center p-2\"\r\n      onClick={() => {\r\n        dispatch(setChatInfo({\r\n          roomId: room.roomId,\r\n          profilePicture: room.image,\r\n          userName: room.userName,\r\n          email: room.email\r\n        }));\r\n        console.log('isMobile',isMobile);\r\n        \r\n        if (isMobile)\r\n          handleSelectView()\r\n      }}\r\n\r\n\r\n    >\r\n      {/* Hình ảnh bên trái */}\r\n      <div div className=\"room-image\" >\r\n        <img\r\n          src={room.image}\r\n          alt={room.userName || 'Room Image'}\r\n          className=\"img-fluid rounded-circle\"\r\n        />\r\n      </div >\r\n\r\n      {/* Phần nội dung bên phải */}\r\n      < div className=\"room-content flex-grow-1 ms-3\" >\r\n        {/* Tên người dùng hoặc tên phòng */}\r\n        <div div className=\"d-flex justify-content-between align-items-center\" >\r\n          <h5 className=\"mb-0 text-truncate\">{room.userName || room.roomName || 'Phòng chat'}</h5>\r\n          {/* Thời gian tin nhắn */}\r\n          <small className=\"text-muted\">{room.lastMessageTime}</small>\r\n        </div >\r\n\r\n        {/* Tin nhắn cuối cùng và số lượng chưa đọc */}\r\n        <div div className=\"d-flex justify-content-between align-items-center mt-1\" >\r\n          <p className=\"mb-0 text-truncate text-muted\">\r\n            {room.lastMessage}\r\n          </p>\r\n          {\r\n            (room.unreadMessagesCount > 0 && chatInfo.roomId != room.roomId) && (\r\n              <span className=\"badge bg-danger rounded-pill unread-count\">\r\n                {room.unreadMessagesCount}\r\n              </span>\r\n            )\r\n          }\r\n        </div >\r\n      </div >\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default RoomItem;\r\n","// src/socket.js\r\nimport { io } from 'socket.io-client';\r\nimport { getCookie } from './utils/cookie';\r\nimport { RefreshToken } from './utils/checkToken';\r\nconst url = require('./urls');\r\n\r\nlet socket = null; // Biến socket được khởi tạo linh hoạt\r\n\r\nconst initializeSocket = (reconnect = false) => {\r\n  const accessToken = getCookie('accessToken'); // Lấy token từ cookie\r\n\r\n  if (reconnect && socket) {\r\n    socket.disconnect(); // Ngắt kết nối cũ nếu có\r\n  }\r\n\r\n  // Tạo kết nối mới\r\n  socket = io(url.socketServer, {\r\n    query: { token: accessToken },\r\n    transports: ['websocket'],\r\n  });\r\n\r\n  // Xử lý lỗi kết nối\r\n  socket.on('connect_error', async (error) => {\r\n    console.error('Lỗi kết nối socket:', error.message);\r\n    if (error.message === 'Token không tồn tại.' || error.message === 'Token không hợp lệ hoặc đã hết hạn.') {\r\n      const resultRefreshToken = await RefreshToken(); // Lấy token mới\r\n      if (resultRefreshToken.success) {\r\n        initializeSocket(true); // Kết nối lại với token mới\r\n      } else {\r\n        console.error('Lỗi làm mới token, cần đăng nhập lại');\r\n        window.location.href = '/'; // Chuyển hướng về trang login\r\n      }\r\n    }\r\n  });\r\n\r\n  return socket;\r\n};\r\n\r\n// Khởi tạo socket lần đầu\r\ninitializeSocket();\r\n\r\nexport { initializeSocket, socket };\r\n\r\n","// src/components/Room/RoomList.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { RefreshToken } from '../../../utils/checkToken';\r\nimport axios from 'axios';\r\nimport UserSearch from './UserSearch';\r\nimport RoomItem from './RoomItem';\r\nimport { BsArrowLeft } from 'react-icons/bs';\r\nimport { getCookie } from '../../../utils/cookie';\r\nimport { initializeSocket, socket } from '../../../socket';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatInfo } from '../../../redux/slices/chatSlice';\r\nconst url = require(\"../../../urls\");\r\n\r\nconst RoomList = ({handleSelectView,isMobile}) => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const chatInfo = useSelector((state) => state.chat);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [searchText, setSearchText] = useState('');\r\n  const [rooms, setRooms] = useState([]); // State lưu danh sách phòng chat\r\n  const [title, setTitle] = useState();\r\n  const accessToken = getCookie('accessToken');\r\n  const [currentPage, setCurrentPage] = useState(1); // Trang hiện tại\r\n  const [totalPages, setTotalPages] = useState(1); // Tổng số trang\r\n  const [loading, setLoading] = useState(false); // Trạng thái tải dữ liệu\r\n  const [hasMore, setHasMore] = useState(true); // Kiểm tra còn dữ liệu để tải không\r\n  const [titleError, setTitleError] = useState(); // Dữ liệu người dùng\r\n  const scrollContainerRef = useRef(null);\r\n  // Hàm lấy danh sách phòng chat người dùng từ API\r\n  const fetchUserRooms = async (page = 1, append = false, isRetry = false, isAutoLoadChat) => {\r\n    try {\r\n      setLoading(true);\r\n      setTitleError();\r\n      const response = await axios.get(url.getUserRooms, {\r\n        params: {\r\n          page,\r\n          limit: 15,\r\n        },\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n      if (response.status === 200) {\r\n        const { rooms: newRooms, totalPages, currentPage } = response.data;\r\n        setRooms((prev) => (append ? [...prev, ...newRooms] : newRooms));\r\n        if (!chatInfo.roomId && isAutoLoadChat)\r\n          dispatch(setChatInfo({\r\n            roomId: response.data.rooms[0].roomId,\r\n            profilePicture: response.data.rooms[0].image,\r\n            userName: response.data.rooms[0].userName,\r\n            email: response.data.rooms[0].email\r\n          }));\r\n        setCurrentPage(currentPage);\r\n        setTotalPages(totalPages);\r\n        setHasMore(currentPage < totalPages);\r\n      }\r\n    } catch (error) {\r\n      if (error.status === 404) {\r\n        setRooms([]);\r\n        setHasMore(true)\r\n        setTitleError(error.response.data.message)\r\n      } else if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n        const resultRefreshToken = await RefreshToken();\r\n        if (resultRefreshToken.success) {\r\n          return fetchUserRooms(page, append, true,isAutoLoadChat);\r\n        } else navigate('/');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n\r\n  };\r\n\r\n  // Kết nối socket và lắng nghe sự kiện 'updateRoomList'\r\n  useEffect(() => {\r\n    // Lấy danh sách phòng lần đầu khi component được tải\r\n   \r\n\r\n    // Kết nối tới server socket\r\n    // khởi tạo\r\n    const socketInstance = initializeSocket();\r\n    // Lắng nghe sự kiện 'updateRoomList' để cập nhật lại danh sách phòng\r\n    socketInstance.on('updateRoomList', () => {\r\n      fetchUserRooms(1, false,false,false);\r\n    });\r\n\r\n    // Đóng kết nối socket khi component bị unmount\r\n    return () => {\r\n      socketInstance.off('updateRoomList'); // Xóa lắng nghe sự kiện\r\n      socketInstance.disconnect(); // Ngắt kết nối socket\r\n    };\r\n  }, []);\r\n\r\n  // Xử lý cuộn để tải thêm\r\n  const handleScroll = () => {\r\n    const container = scrollContainerRef.current;\r\n    if (\r\n      container &&\r\n      container.scrollTop + container.clientHeight >= container.scrollHeight - 100 &&\r\n      !loading &&\r\n      hasMore\r\n    ) {\r\n      fetchUserRooms(currentPage + 1, true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const container = scrollContainerRef.current;\r\n\r\n    if (container) {\r\n      container.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (container) {\r\n        container.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, [loading, hasMore, currentPage]);\r\n\r\n  useEffect(() => {\r\n    fetchUserRooms(1, false,false,true);\r\n\r\n  }, [chatInfo.roomId]);\r\n  // Hàm để xử lý khi nhấn nút quay lại\r\n  const handleBackClick = () => {\r\n    setIsSearching(false);\r\n    setSearchText('');\r\n  };\r\n  const inputRef = useRef();\r\n  return (\r\n    <div className=\"room-list-container\">\r\n      {/* Tiêu đề */}\r\n      <h1 className=\"room-list-title\">Đoạn chat</h1>\r\n\r\n      {/* Thanh tìm kiếm */}\r\n      <div className=\"search-bar\">\r\n        {isSearching && (\r\n          <button className=\"back-button\" onClick={handleBackClick}>\r\n            <BsArrowLeft size={20} />\r\n          </button>\r\n        )}\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-input\"\r\n          placeholder=\"Tìm kiếm người dùng...\"\r\n          value={searchText}\r\n          onChange={(e) => setSearchText(e.target.value)}\r\n          onFocus={() => setIsSearching(true)}\r\n          ref={inputRef}\r\n        />\r\n        {\r\n          searchText &&\r\n          <button\r\n            className=\"btn btn-close\"\r\n            // style={{ color: 'red', marginLeft: '4px', marginTop: '10px' }}\r\n            onClick={() => {\r\n              setSearchText('');\r\n              inputRef.current.focus();\r\n            }}\r\n          >\r\n          </button>\r\n        }\r\n      </div>\r\n\r\n      {/* Nội dung chính */}\r\n      <div className=\"room-list-content\"\r\n        ref={scrollContainerRef}\r\n      >\r\n        {isSearching ? (\r\n          <UserSearch searchText={searchText} setIsSearching={setIsSearching} />\r\n        ) : title ? <h5 className='text-center text-secondary'>\r\n          {title}\r\n        </h5> : (\r\n          rooms.map((room) => (\r\n            <RoomItem\r\n              key={room.roomId}\r\n              room={room}\r\n              handleSelectView={handleSelectView}\r\n              isMobile={isMobile}\r\n            // roomName={room.roomName}\r\n            // unreadMessagesCount={room.unreadMessagesCount}\r\n            // lastMessageTime={room.lastMessageTime}\r\n            />\r\n          ))\r\n        )}\r\n        {loading && (\r\n          <div className=\"text-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n              <span className=\"visually-hidden\">Đang tải...</span>\r\n            </div>\r\n            <p>Đang tải...</p>\r\n          </div>\r\n        )}\r\n\r\n\r\n        {titleError && <h4 className=\"text-center text-danger\">{titleError}</h4>}\r\n        {(!hasMore && totalPages != 1) && <h5 className=\"text-center text-primary mt-2\">Đã hiển thị tất cả phòng chat.</h5>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomList;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { BsPencilFill } from 'react-icons/bs';\r\nimport { FaSignOutAlt } from 'react-icons/fa';\r\nimport { RefreshToken } from '../../../utils/checkToken';\r\nimport { getCookie, deleteCookie } from '../../../utils/cookie';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst url = require(\"../../../urls\");\r\nconst UserProfile = () => {\r\n    const navigate = useNavigate();\r\n    const userInfo = useSelector((state) => state.auth.user);\r\n    const [titleError, setTitleError] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [confirmChangePicture, setConfirmChangePicture] = useState(false);\r\n    const [confirmChangeUserName, setConfirmChangeUserName] = useState(false);\r\n    const [confirmChangePassword, setConfirmChangePassword] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [success, setSuccess] = useState('');\r\n\r\n    useEffect(() => {\r\n        console.log('userInfo', userInfo);\r\n    }, [userInfo]);\r\n    const [hinhAnh, setHinhAnh] = useState(userInfo.profilePicture ? userInfo.profilePicture : undefined);\r\n    const [userName, setUserName] = useState(userInfo.userName ? userInfo.userName : null);\r\n    const [oldPassword, setOldPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState('');\r\n\r\n    // xử lý ảnh\r\n    //url xử lý hiển thị hình ảnh\r\n    const [urlAnh, setUrlAnh] = useState();\r\n    useEffect(() => {\r\n        if (hinhAnh && hinhAnh instanceof File) { // Kiểm tra kiểu dữ liệu\r\n            setUrlAnh(URL.createObjectURL(hinhAnh));\r\n        } else setUrlAnh(hinhAnh);\r\n        console.log('hinh anh', hinhAnh);\r\n\r\n    }, [hinhAnh]);\r\n    function ImageUpload() {\r\n        const fileInputRef = useRef(null);\r\n        const handleImageChange = (event) => {\r\n            const file = event.target.files[0];\r\n            if (file) {\r\n                // Kiểm tra xem file có phải là hình ảnh hay không\r\n                if (file.type.startsWith('image/')) {\r\n                    const reader = new FileReader();\r\n                    reader.onload = () => {\r\n                        setHinhAnh(file)\r\n                        // setDataReq({\r\n                        //     ...dataReq,\r\n                        //     HinhAnh: file // Lưu file hình ảnh vào dataReq\r\n                        // });\r\n                    };\r\n                    reader.readAsDataURL(file);\r\n                    setTitleError(null)\r\n                    setConfirmChangePicture(true)\r\n                } else {\r\n                    setTitleError('Bạn chỉ có thể chọn file hình ảnh.')\r\n                }\r\n            } else {\r\n                setHinhAnh(undefined)\r\n            }\r\n        };\r\n\r\n        const handleChooseFileClick = () => {\r\n            fileInputRef.current.click();\r\n        };\r\n\r\n        const handleDrop = (event) => {\r\n            event.preventDefault();\r\n            setTitleError(null)\r\n            const file = event.dataTransfer.files[0];\r\n\r\n            if (file) {\r\n                // Kiểm tra xem file có phải là hình ảnh hay không\r\n                if (file.type.startsWith('image/')) {\r\n                    const reader = new FileReader();\r\n                    reader.onload = () => {\r\n                        setHinhAnh(file)\r\n                        // setDataReq({\r\n                        //     ...dataReq,\r\n                        //     HinhAnh: file // Lưu file hình ảnh vào dataReq\r\n                        // });\r\n                    };\r\n                    reader.readAsDataURL(file);\r\n                    setTitleError(null)\r\n                    setConfirmChangePicture(true)\r\n                } else {\r\n                    setTitleError('Bạn chỉ có thể chọn file hình ảnh.')\r\n                }\r\n            }\r\n        };\r\n\r\n        const handleDragOver = (event) => {\r\n            event.preventDefault();\r\n            setTitleError(null)\r\n            setConfirmChangePicture(true)\r\n\r\n        };\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                <div\r\n                    style={{ width: '100%', textAlign: 'center', margin: '1% 0 2% 0' }}\r\n                    onClick={handleChooseFileClick}\r\n                    onDrop={handleDrop}\r\n                    onDragOver={handleDragOver}\r\n                >\r\n                    {!hinhAnh && <span><span style={{ color: 'blue' }}>Chọn file</span> hoặc Kéo và thả ảnh vào đây</span>}\r\n\r\n                    <input\r\n                        ref={fileInputRef}\r\n                        type=\"file\"\r\n                        accept=\"image/*\" // Chỉ chấp nhận các file hình ảnh\r\n                        style={{ display: 'none' }}\r\n                        onChange={handleImageChange}\r\n                    />\r\n                    {hinhAnh && (\r\n                        <div style={{\r\n                            position: 'relative',\r\n                            display: 'inline-block'\r\n                        }} >\r\n                            <img\r\n                                src={urlAnh} // Sử dụng URL.createObjectURL để hiển thị hình ảnh đã chọn\r\n                                alt=\"Selected\"\r\n                                style={{\r\n                                    width: '200px',\r\n                                    height: '200px',\r\n                                    objectFit: 'cover',\r\n                                    borderRadius: '50%',\r\n                                    border: '5px solid #007bff',\r\n                                    boxShadow: 'rgba(0, 0, 0, 0.05) 0px 20px 27px 0px'\r\n                                }}\r\n                            />\r\n                            <BsPencilFill\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    bottom: 0,\r\n                                    right: 0,\r\n                                    cursor: 'pointer',\r\n                                    width: 20, // Thêm độ rộng\r\n                                    height: 20 // Thêm chiều cao \r\n                                }}\r\n                            >\r\n\r\n                            </BsPencilFill>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const handleSubmit = async () => {\r\n\r\n        setError('')\r\n        setSuccess('')\r\n\r\n        if (confirmChangePicture) {\r\n            const fetchUpdateProfilePicture = async (isRetry = false) => {\r\n                try {\r\n                    setLoading(true);\r\n                    // Tạo FormData\r\n                    const formData = new FormData();\r\n                    formData.append('profilePicture', hinhAnh);\r\n\r\n                    // Gửi dữ liệu với axios\r\n                    const response = await axios.post(url.updateProfilePicture, formData, {\r\n                        headers: {\r\n                            'Content-Type': 'multipart/form-data',\r\n                            'Authorization': `Bearer ${getCookie('accessToken')}`\r\n                        }\r\n                    })\r\n                    setSuccess(response.data.message)\r\n                } catch (error) {\r\n                    if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                        const resultRefreshToken = await RefreshToken();\r\n                        if (resultRefreshToken.success) {\r\n                            return fetchUpdateProfilePicture(true);\r\n                        } else navigate('/');\r\n                    } else setError(error.response.data.message)\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n            fetchUpdateProfilePicture(false)\r\n        }\r\n        if (confirmChangeUserName) {\r\n            const fetchUpdateUserName = async (isRetry = false) => {\r\n                if (userName) {\r\n                    try {\r\n                        setLoading(true);\r\n                        // Gửi dữ liệu với axios\r\n                        const response = await axios.put(url.updateUserName, { userName }, {\r\n                            headers: {\r\n                                'Authorization': `Bearer ${getCookie('accessToken')}`\r\n                            }\r\n                        })\r\n                        setSuccess(response.data.message)\r\n                    } catch (error) {\r\n                        if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                            const resultRefreshToken = await RefreshToken();\r\n                            if (resultRefreshToken.success) {\r\n                                return fetchUpdateUserName(true);\r\n                            } else navigate('/');\r\n                        } else setError(error.response.data.message)\r\n                    } finally {\r\n                        setLoading(false);\r\n                    }\r\n                } else setError('Vui lòng nhập đầy đủ thông tin')\r\n            };\r\n            fetchUpdateUserName(false)\r\n        }\r\n        if (confirmChangePassword) {\r\n            const fetchChangePassword = async (isRetry = false) => {\r\n                if (oldPassword && newPassword && confirmNewPassword) {\r\n                    if (newPassword.trim() === confirmNewPassword.trim()) {\r\n                        try {\r\n                            setLoading(true);\r\n                            // Gửi dữ liệu với axios\r\n                            const response = await axios.post(url.changePassword, { oldPassword, newPassword }, {\r\n                                headers: {\r\n                                    'Authorization': `Bearer ${getCookie('accessToken')}`\r\n                                },\r\n                                withCredentials: true\r\n                            })\r\n                            setSuccess(response.data.message)\r\n                        } catch (error) {\r\n                            if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                                const resultRefreshToken = await RefreshToken();\r\n                                if (resultRefreshToken.success) {\r\n                                    return fetchChangePassword(true);\r\n                                } else navigate('/');\r\n                            } else setError(error.response.data.message)\r\n                        } finally {\r\n                            setLoading(false);\r\n                        }\r\n                    } else setError('Mật khẩu mới và nhập lại mật khẩu không khớp')\r\n                } else setError('Vui lòng nhập đầy đủ thông tin')\r\n            };\r\n            fetchChangePassword(false)\r\n        }\r\n    };\r\n    const handleLogout = async () => {\r\n        try {\r\n            const response = await axios.post(url.logout, {}, {\r\n                withCredentials: true\r\n            })\r\n            if (response.data.success) {\r\n                deleteCookie('accessToken');\r\n                navigate('/');\r\n            }\r\n\r\n        } catch (error) {\r\n            setError(error.response.data.message)\r\n        }\r\n    };\r\n    useEffect(() => {\r\n       if(userName==='')\r\n        setConfirmChangeUserName(false)\r\n    }, [userName]);\r\n    useEffect(() => {\r\n        if(oldPassword===''||newPassword==='' || confirmNewPassword==='')\r\n         setConfirmChangePassword(false)\r\n     }, [oldPassword,newPassword,confirmNewPassword]);\r\n    return (\r\n        <div>\r\n            <h2 style={{ width: '100%', textAlign: 'center', fontWeight: 'bolder' }}>Thông Tin Người Dùng</h2>\r\n            <div className=\"mt-3\" style={{ width: '100%', textAlign: 'center' }}>\r\n                <ImageUpload />\r\n            </div>\r\n\r\n\r\n            <h1 style={{ textAlign: 'center', marginBottom: '0' }}>{userName}</h1>\r\n            <p style={{ textAlign: 'center', }}>{userInfo.email}</p>\r\n            <label>Tên người dùng</label>\r\n            <div className=\"mb-3 mt-2\">\r\n                <input\r\n                    style={{ border: 'gray 1px solid' }}\r\n                    type=\"text\"\r\n                    className=\"form-control-lg w-100\"\r\n                    value={userName}\r\n                    onChange={(e) => {\r\n                        setConfirmChangeUserName(true);\r\n                        setUserName(e.target.value)\r\n                        setError('')\r\n                    }}\r\n                    required\r\n                    placeholder=\"Tên người dùng\"\r\n                />\r\n            </div>\r\n\r\n\r\n            {/* đổi mật khẩu */}\r\n            <h4 className=\"mt-5\">Đổi Mật Khẩu</h4>\r\n            <div className=\"form-group\">\r\n                <label>Mật Khẩu Cũ</label>\r\n                <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    value={oldPassword}\r\n                    onChange={(event) => {\r\n                        setConfirmChangePassword(true);\r\n                        setOldPassword(event.target.value)\r\n                        setError('')\r\n                    }}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Mật Khẩu Mới</label>\r\n                <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    value={newPassword}\r\n                    onChange={(event) => {\r\n                        setConfirmChangePassword(true);\r\n                        setNewPassword(event.target.value)\r\n                        setError('')\r\n                    }}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Nhập Lại Mật Khẩu Mới</label>\r\n                <input\r\n                    type=\"password\"\r\n                    className=\"form-control\"\r\n                    value={confirmNewPassword}\r\n                    onChange={(event) => {\r\n                        setConfirmChangePassword(true);\r\n                        setConfirmNewPassword(event.target.value)\r\n                        setError('')\r\n                    }}\r\n                    required\r\n                />\r\n            </div>\r\n            {titleError &&\r\n                <p style={{ color: 'red' }} className=\"text-center\">{titleError}</p>\r\n            }\r\n            {error &&\r\n                <p style={{ color: 'red' }} className=\"text-center\">{error}</p>\r\n            }\r\n            {success &&\r\n                <p className=\"text-center text-primary\">{success}</p>\r\n            }\r\n            {\r\n                <div className=\"d-flex justify-content-center mt-3\">\r\n                    <button className=\"btn btn-primary\"\r\n                        disabled={(!(confirmChangePicture || confirmChangeUserName || confirmChangePassword)) || loading}\r\n                        onClick={() => handleSubmit()}\r\n                    >{loading ? 'Đang xử lý' : 'Xác Nhận'}</button>\r\n                </div>\r\n            }\r\n            {\r\n                <div className=\"d-flex justify-content-end mt-3\">\r\n                    <button className=\"btn btn-warning\"\r\n                        onClick={() => handleLogout()}\r\n                    >Đăng Xuất <FaSignOutAlt /></button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserProfile;","// src/components/Room/Room.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport RoomList from './RoomList';\r\nimport UserProfile from './UserProfile';\r\nimport { BsChatDots, BsGear } from 'react-icons/bs';\r\nimport { socket } from '../../../socket';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Room = ({handleSelectView,isMobile}) => {\r\n  const chatInfo = useSelector((state) => state.chat);\r\n  const [activeTab, setActiveTab] = useState('chat'); // 'chat' cho Đoạn chat và 'settings' cho Cài đặt\r\n  useEffect(() => {\r\n    // //vào phòng chat\r\n    // console.log('chatInfo.roomId',chatInfo.roomId);\r\n    \r\n    \r\n  }, [chatInfo.roomId]);\r\n  const renderContent = () => {\r\n    if (activeTab === 'chat') {\r\n      return <RoomList handleSelectView={handleSelectView} isMobile={isMobile}/>;\r\n    } else if (activeTab === 'settings') {\r\n      return <UserProfile />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"room-container d-flex flex-column shadow p-3 ms-3 mt-3 me-3 rounded\">\r\n      {/* Nội dung chính hiển thị RoomList hoặc UserProfile */}\r\n      <div className=\"room-content flex-grow-1\">\r\n        {renderContent()}\r\n      </div>\r\n\r\n      {/* Thanh nav ở dưới cùng */}\r\n      <div className=\"room-nav d-flex justify-content-around align-items-center\">\r\n        <button\r\n          className={`nav-button ${activeTab === 'chat' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('chat')}\r\n        >\r\n          <BsChatDots size={24} />\r\n          <span>Đoạn chat</span>\r\n        </button>\r\n        <button\r\n          className={`nav-button ${activeTab === 'settings' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('settings')}\r\n        >\r\n          <BsGear size={24} />\r\n          <span>Cài đặt</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","//MessageForm.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { BsPaperclip, BsFillSendFill } from 'react-icons/bs';\r\nimport { useSelector } from 'react-redux';\r\nimport { initializeSocket, socket } from '../../../socket';\r\nconst MessageForm = () => {\r\n    const [message, setMessage] = useState('');\r\n    const chatInfo = useSelector((state) => state.chat);\r\n    const inputRef = useRef(null);\r\n    const handleInputChange = (e) => {\r\n        setMessage(e.target.value);\r\n    };\r\n\r\n    const handleSend = () => {\r\n        if (message.trim()) {\r\n            //gửi tin nhắn thông qua socket\r\n            socket.emit('sendMessage', { roomId: chatInfo.roomId,message: message});\r\n            setMessage(''); // Xóa nội dung sau khi gửi\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Focus lại ô nhập liệu khi roomId thay đổi\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n            setMessage('')\r\n        }\r\n    }, [chatInfo.roomId]); // Theo dõi sự thay đổi của chatInfo.roomId\r\n    return (\r\n        <form className=\"message-form d-flex align-items-center px-3 py-2\"\r\n            onSubmit={(e) => {\r\n                e.preventDefault(); // Ngăn việc reload trang\r\n                handleSend(); // Gọi hàm gửi\r\n            }}\r\n        >\r\n            {/* Biểu tượng đính kèm */}\r\n            <div className=\"icon-container me-2\">\r\n                <BsPaperclip size={24} className=\"text-muted\" />\r\n            </div>\r\n\r\n            {/* Ô nhập tin nhắn */}\r\n            <input\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                className=\"form-control flex-grow-1 search-input\"\r\n                placeholder=\"Nhập tin nhắn...\"\r\n                value={message}\r\n                onChange={handleInputChange}\r\n                autoFocus\r\n\r\n            />\r\n\r\n            {/* Nút gửi */}\r\n            <button\r\n                type=\"submit\" // Đặt loại là submit để tương tác đúng với form\r\n                className={`btn btn-primary ms-2 ${message.trim() ? '' : 'disabled'}`}\r\n                disabled={!message.trim()}\r\n            >\r\n                <BsFillSendFill size={20} />\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;\r\n","// src/components/Room/ChatItem.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { BsPencil, BsTrash } from 'react-icons/bs';\r\nimport axios from 'axios';\r\nimport { getCookie } from '../../../utils/cookie';\r\nconst url = require(\"../../../urls\");\r\nconst ChatItem = ({ message, messageAction, setMessageAction, handleEditMessage,handleDeleteMessage }) => {\r\n  const dispatch = useDispatch();\r\n  const userLogin = useSelector((state) => state.auth.user);\r\n  const chatInfo = useSelector((state) => state.chat);\r\n  const isSelected = messageAction && messageAction.messageId === message.messageId;\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* Thời gian tin nhắn */}\r\n      <div className=\"d-flex mt-2\">\r\n        <small className=\"text-muted mx-auto\">{message.createdAt}</small>\r\n      </div>\r\n      {/* Hình ảnh bên trái */}\r\n      {(message.senderId !== userLogin.userId) ?\r\n        <div className='room-item '>\r\n          <div\r\n            className=\"d-flex align-items-center p-2 pt-0\"\r\n          >\r\n            <div className=\"room-image\"\r\n              onClick={() => {\r\n                alert('bật trang cá nhân')\r\n              }}>\r\n              <img\r\n                src={chatInfo.profilePicture}\r\n                alt={\"\"}\r\n                className=\"img-fluid rounded-circle\"\r\n              />\r\n            </div>\r\n\r\n            {/* Phần nội dung bên phải */}\r\n            <div className=\"room-content flex-grow-1 ms-3\">\r\n              {/* Tên người dùng hoặc tên phòng */}\r\n              <div className=\"d-flex justify-content-start align-items-center\">\r\n                <h5\r\n                  style={{ maxWidth: '80%', wordBreak: 'break-word' }}\r\n                  className=\"text-wrap\">\r\n                  {message.messageContent || 'Tin nhắn'}\r\n                  {message.editedAt &&\r\n                    <i style={{ display: 'block', \r\n                      fontSize: '0.55em', \r\n                      fontWeight: 'normal' \r\n                    }}>Đã chỉnh sửa: {message.editedAt}</i>\r\n                  }\r\n                </h5>\r\n                \r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        :\r\n        <div className='room-item'>\r\n          <div className=\" d-flex align-items-center p-2 pt-0\"\r\n            onClick={() => {\r\n              if (isSelected) {\r\n                setMessageAction(null); // Ẩn nội dung nếu phần tử đã được chọn\r\n              } else {\r\n                setMessageAction(message); // Hiển thị nội dung nếu phần tử chưa được chọn\r\n              }\r\n            }}\r\n          >\r\n\r\n            {/* Phần nội dung bên trái */}\r\n            <div className=\"room-content flex-grow-1 me-3\">\r\n              {isSelected &&\r\n                <div className='d-flex justify-content-end'>\r\n                  <button\r\n                    className={`btn btn-primary`}\r\n                    onClick={handleEditMessage}\r\n                  >\r\n                    <BsPencil size={15} />\r\n                  </button>\r\n                  <button\r\n                    className={`btn btn-primary ms-2`}\r\n                    onClick={handleDeleteMessage}\r\n                  >\r\n                    <BsTrash size={15} />\r\n                  </button>\r\n                </div>\r\n              }\r\n\r\n              {/* Tên người dùng hoặc tên phòng */}\r\n              <div className=\"d-flex justify-content-end align-items-center\">\r\n                <h5\r\n                  style={{ maxWidth: '80%', wordBreak: 'break-word' , textAlign: message.messageContent.length > 20 ? 'null' : 'end' }}\r\n                  className=\"text-wrap\">\r\n                  {message.messageContent || 'Tin nhắn'}\r\n                  {message.editedAt &&\r\n                    <i style={{ display: 'block', \r\n                      fontSize: '0.55em', \r\n                      fontWeight: 'normal' \r\n                    }}>Đã chỉnh sửa: {message.editedAt}</i>\r\n                  }\r\n                </h5>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n            {/* Hình ảnh bên phải */}\r\n            <div className=\"room-image\">\r\n              <img\r\n                src={userLogin.profilePicture}\r\n                alt={\"\"}\r\n                className=\"img-fluid rounded-circle\"\r\n              />\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatItem;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { RefreshToken } from '../../../utils/checkToken';\r\nimport axios from 'axios';\r\n// import RoomItem from './RoomItem';\r\nimport { BsCircleFill, BsArrowLeft } from 'react-icons/bs';\r\nimport { getCookie } from '../../../utils/cookie';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatInfo } from '../../../redux/slices/chatSlice';\r\nimport MessageForm from './MessageForm';\r\nimport ChatItem from './ChatItem';\r\nimport { initializeSocket, socket } from '../../../socket';\r\nconst url = require(\"../../../urls\");\r\n\r\nconst ChatList = ({ handleSelectView, isMobile }) => {\r\n    const navigate = useNavigate();\r\n    const chatInfo = useSelector((state) => state.chat);\r\n    const [title, setTitle] = useState();\r\n    const [messages, setMessages] = useState([]); // State lưu danh sách đoạn chat\r\n    const [currentPage, setCurrentPage] = useState(1); // Trang hiện tại\r\n    const [totalPages, setTotalPages] = useState(1); // Tổng số trang\r\n    const [loading, setLoading] = useState(false); // Trạng thái tải dữ liệu\r\n    const [hasMore, setHasMore] = useState(true); // Kiểm tra còn dữ liệu để tải không\r\n    const [titleError, setTitleError] = useState();\r\n    const scrollContainerRef = useRef(null);\r\n    const [joinRoom, setJoinRoom] = useState(false);\r\n    const hasLoadedRef = useRef(false); // Ref để kiểm tra lần tải trang đầu tiên\r\n    const [messageAction, setMessageAction] = useState(null);\r\n    // Hàm lấy danh sách phòng chat người dùng từ API\r\n    const fetchGetMessagesByRoomId = async (page = 1, append = false, isRetry = false) => {\r\n        if (!chatInfo.roomId)\r\n            return\r\n        setLoading(true);\r\n        setTitleError();\r\n        try {\r\n\r\n            const response = await axios.get(url.getMessagesByRoomId(chatInfo.roomId), {\r\n                params: {\r\n                    page,\r\n                    limit: 20,\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${getCookie('accessToken')}`,\r\n                },\r\n            });\r\n            const { messages: newMessages, totalPages, currentPage } = response.data;\r\n            setMessages((prev) => {\r\n                const allMessages = append ? [...prev, ...newMessages] : newMessages;\r\n\r\n                // Lọc dữ liệu trùng lặp\r\n                return [...new Map(allMessages.map((msg) => [msg.messageId, msg])).values()];\r\n            });\r\n            setCurrentPage(currentPage);\r\n            setTotalPages(totalPages);\r\n\r\n            setHasMore(currentPage < totalPages); // Nếu chưa đến trang cuối, còn tải\r\n            socket.emit('joinRoom', { roomId: chatInfo.roomId });\r\n        } catch (error) {\r\n            if (error.status === 404) {\r\n                setMessages([]);\r\n                setHasMore(true)\r\n                setTitleError('Hãy bắt đầu với tin nhắn đầu tiên')\r\n            }\r\n            else if (error.response.status === 403 && error.response.data.message === \"Bạn không phải là thành viên của phòng này!\")\r\n                setTitleError(error.response.data.message)\r\n            else if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                const resultRefreshToken = await RefreshToken();\r\n                if (resultRefreshToken.success) {\r\n                    return fetchGetMessagesByRoomId(page, append, true);\r\n                } else navigate('/');\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Lấy danh sách đoạn chat lần đầu khi component được tải\r\n        fetchGetMessagesByRoomId(1, false);\r\n        // Khởi tạo socket\r\n        const socketInstance = initializeSocket();\r\n\r\n        // Lắng nghe sự kiện 'vào phòng' từ server\r\n        socketInstance.on('joinedRoom', (twoMember) => {\r\n            if (twoMember.twoMember)\r\n                setJoinRoom(true)\r\n            else setJoinRoom(false)\r\n        });\r\n\r\n        // Lắng nghe sự kiện 'receiveMessage' từ server\r\n        socketInstance.on('receiveMessage', (newMessage) => {\r\n            setMessages((prev) => [newMessage, ...(prev || [])]);\r\n            const container = scrollContainerRef.current;\r\n            // Trì hoãn cuộn cho đến khi tất cả các phần tử được render\r\n            setTimeout(() => {\r\n                container.scrollTop = container.scrollHeight;\r\n            }, 200); // Thử với độ trễ 200ms để DOM render hoàn chỉnh\r\n\r\n        });\r\n        hasLoadedRef.current = false;\r\n        //lắng nghe sự kiện sửa tin nhắn\r\n        socketInstance.on('messageEdited', (data) => {\r\n            // Cập nhật danh sách tin nhắn\r\n            setMessages((prevMessages) =>\r\n                prevMessages.map((message) =>\r\n                    message.messageId === data.messageId\r\n                        ? {\r\n                            ...message,\r\n                            messageContent: data.newMessageContent,\r\n                            editedAt: data.editedAt\r\n                        }\r\n                        : message\r\n                )\r\n            );\r\n\r\n        });\r\n        //lắng nghe sự kiện xoá tin nhắn\r\n        socketInstance.on('messageDeleted', (data) => {\r\n            setMessages((prevMessages) =>\r\n                prevMessages.filter((message) => message.messageId !== data.messageId)\r\n            );\r\n        });\r\n        // Dọn dẹp kết nối và sự kiện khi component unmount\r\n        return () => {\r\n            socketInstance.off('joinedRoom'); // Xóa lắng nghe sự kiện\r\n            socketInstance.off('receiveMessage');\r\n            socketInstance.off('messageEdited');\r\n            socketInstance.off('messageDeleted');\r\n            socketInstance.disconnect(); // Ngắt kết nối socket\r\n        };\r\n\r\n\r\n\r\n    }, [chatInfo.roomId]);\r\n    useEffect(() => {\r\n        const container = scrollContainerRef.current;\r\n        if (container && !hasLoadedRef.current && (container.scrollHeight > container.clientHeight)) {\r\n            // Trì hoãn cuộn cho đến khi tất cả các phần tử được render\r\n            setTimeout(() => {\r\n                container.scrollTop = container.scrollHeight;\r\n                hasLoadedRef.current = true; // Đánh dấu đã hoàn thành cuộn lần đầu\r\n            }, 200); // Thử với độ trễ 200ms để DOM render hoàn chỉnh\r\n        }\r\n\r\n        // Thêm sự kiện cuộn\r\n        const handleScroll = () => {\r\n            if (container && container.scrollTop <= 150 && !loading && hasMore) {\r\n                fetchGetMessagesByRoomId(currentPage + 1, true);\r\n            }\r\n        };\r\n\r\n        if (container) {\r\n            container.addEventListener(\"scroll\", handleScroll);\r\n        }\r\n\r\n        return () => {\r\n            if (container) {\r\n                container.removeEventListener(\"scroll\", handleScroll);\r\n            }\r\n        };\r\n    }, [loading, hasMore, currentPage]);\r\n\r\n    useEffect(() => {\r\n\r\n        console.log('messageAction', messageAction);\r\n\r\n    }, [messageAction]);\r\n\r\n\r\n\r\n    const handleEditMessage = async () => {\r\n        let result = prompt('Sửa tin nhắn', messageAction.messageContent);\r\n        if (result !== null) {\r\n            result = result.trim()\r\n            const fetchEditMessage = async (isRetry = false) => {\r\n                try {\r\n                    const response = await axios.put(url.editMessageById(messageAction.messageId), {\r\n                        newMessageContent: result\r\n                    }, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${getCookie('accessToken')}`,\r\n                        }\r\n                    });\r\n                    //thành công\r\n                    // Cập nhật danh sách tin nhắn\r\n                    const updatedMessage = response.data.updatedMessage;\r\n                    setMessages((prevMessages) =>\r\n                        prevMessages.map((message) =>\r\n                            message.messageId === updatedMessage.messageId\r\n                                ? {\r\n                                    ...message,\r\n                                    messageContent: updatedMessage.newMessageContent,\r\n                                    editedAt: updatedMessage.editedAt\r\n                                }\r\n                                : message\r\n                        )\r\n                    );\r\n                    //phát sự kiện cập nhật tin nhắn\r\n                    socket.emit('editMessage', {\r\n                        messageId: updatedMessage.messageId,\r\n                        newMessageContent: updatedMessage.newMessageContent,\r\n                        editedAt: updatedMessage.editedAt,\r\n                        roomId: chatInfo.roomId\r\n                    });\r\n                } catch (error) {\r\n                    if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                        const resultRefreshToken = await RefreshToken();\r\n                        if (resultRefreshToken.success) {\r\n                            return fetchEditMessage(true);\r\n                        } else navigate('/');\r\n                    }\r\n                }\r\n            }\r\n            fetchEditMessage(false)\r\n        } else {\r\n            alert(\"Hãy nhập nội dung tin nhắn\");\r\n        }\r\n    };\r\n    const handleDeleteMessage = async () => {\r\n        const fetchDeleteMessage = async (isRetry = false) => {\r\n            try {\r\n                const response = await axios.delete(url.deleteMessageById(messageAction.messageId), {\r\n                    headers: {\r\n                        Authorization: `Bearer ${getCookie('accessToken')}`,\r\n                    }\r\n                });\r\n                //thành công\r\n                // Cập nhật danh sách tin nhắn\r\n                setMessages((prevMessages) =>\r\n                    prevMessages.filter((message) => message.messageId !== response.data.messageId)\r\n                );\r\n                //phát sự kiện xoá tin nhắn\r\n                socket.emit('deleteMessage', {\r\n                    messageId: response.data.messageId,\r\n                    roomId: chatInfo.roomId\r\n                });\r\n            } catch (error) {\r\n                if ((error.response.status === 401 || error.response.status === 403) && !isRetry) {\r\n                    const resultRefreshToken = await RefreshToken();\r\n                    if (resultRefreshToken.success) {\r\n                        return fetchDeleteMessage(true);\r\n                    } else navigate('/');\r\n                }\r\n            }\r\n        }\r\n        fetchDeleteMessage(false)\r\n    };\r\n    return (\r\n        <div className=\"room-container d-flex flex-column shadow mt-3 p-3 ms-3 me-3 rounded\">\r\n\r\n            <div className=\"\">\r\n                <div className=\"room-list-container\">\r\n                    <div className=\"room-item d-flex align-items-center p-2\"\r\n                    >\r\n                        {isMobile && (\r\n                            <button className=\"back-button\" onClick={handleSelectView}>\r\n                                <BsArrowLeft size={20} />\r\n                            </button>\r\n                        )}\r\n                        {/* Hình ảnh bên trái */}\r\n                        <div className=\"room-image\"\r\n                        // onClick={() => alert(\"thông tin người dùng\")}\r\n                        >\r\n                            <img\r\n                                src={chatInfo.profilePicture}\r\n                                alt={chatInfo.userName || 'user Image'}\r\n                                className=\"img-fluid rounded-circle\"\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Phần nội dung bên phải */}\r\n                        <div className=\"flex-grow-1 ms-3\"\r\n                        // onClick={() => alert(\"thông tin người dùng\")}\r\n                        >\r\n                            {/* Tên người dùng hoặc tên phòng */}\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <h5 className=\"mb-0 text-truncate\">{chatInfo.userName || chatInfo.roomName || 'Phòng chat'} {joinRoom && <BsCircleFill style={{ color: '#28a745', fontSize: '1rem' }} />}</h5>\r\n                                {/* Thời gian tin nhắn */}\r\n                                {/* <small className=\"text-muted\">{user.lastMessageTime}</small> */}\r\n                            </div>\r\n\r\n                            {/* Tin nhắn cuối cùng và số lượng chưa đọc */}\r\n                            <div className=\"d-flex justify-content-between align-items-center mt-1\">\r\n                                <p className=\"mb-0 text-truncate text-muted\">\r\n                                    {chatInfo.email}\r\n                                </p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"room-list-container\"\r\n                style={{ height: '100%', maxHeight: '100%', overflowY: 'auto' }}\r\n            >\r\n                {/* Nội dung chính */}\r\n                <div className=\"room-list-content\"\r\n                    ref={scrollContainerRef}\r\n                    style={{ height: '100%', maxHeight: '100%', overflowY: 'auto' }}\r\n                >\r\n                    {loading && (\r\n                        <div className=\"text-center\">\r\n                            <div className=\"spinner-border text-primary\" role=\"status\">\r\n                                <span className=\"visually-hidden\">Đang tải...</span>\r\n                            </div>\r\n                            <p>Đang tải...</p>\r\n                        </div>\r\n                    )}\r\n\r\n\r\n                    {titleError && <h4 className=\"text-center text-danger\">{titleError}</h4>}\r\n                    {(!hasMore && totalPages != 1) && <h5 className=\"text-center text-primary\">Đã hiển thị tất cả tin nhắn.</h5>}\r\n                    {title ? (\r\n                        <h5 className='text-center text-secondary'>\r\n                            {title}\r\n                        </h5>\r\n                    ) : (\r\n                        [...messages].reverse().map((message) => ( // Đảo ngược mảng\r\n                            <ChatItem\r\n                                key={message.messageId}\r\n                                message={message}\r\n                                messageAction={messageAction}\r\n                                setMessageAction={setMessageAction}\r\n                                handleEditMessage={handleEditMessage}\r\n                                handleDeleteMessage={handleDeleteMessage}\r\n                            />\r\n                        ))\r\n                    )}\r\n\r\n                </div>\r\n\r\n            </div>\r\n            {/* Thanh nav ở dưới cùng */}\r\n            <div className=\"room-nav d-flex justify-content-around align-items-center\">\r\n                <MessageForm></MessageForm>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChatList;","// src/pages/MessagingPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Room from '../components/Messaging/Room/Room';\r\nimport ChatList from '../components/Messaging/Chat/ChatList';\r\nimport { loadAndApplyTheme } from '../utils/themeUtils';\r\nimport { CheckToken } from '../utils/checkToken';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../redux/slices/authSlice';\r\nconst MessagingPage = () => {\r\n  const [currentView, setCurrentView] = useState('room'); // 'room' cho danh sách phòng, 'chat' cho danh sách tin nhắn\r\n  const [selectedRoom, setSelectedRoom] = useState(false); // Phòng đã chọn\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();  // Sử dụng useDispatch tại đây\r\n  // Xử lý responsive\r\n  useEffect(() => {\r\n    const verifyToken = async () => {\r\n      const result = await CheckToken();  // Gọi hàm checkToken\r\n\r\n      if (!result.success) {\r\n        navigate('/');  // Điều hướng nếu token không hợp lệ\r\n      } else {\r\n        // Dispatch thông tin người dùng nếu token hợp lệ\r\n        if (result.user) {\r\n          dispatch(login({ user: result.user }));\r\n        }\r\n        setLoading(false);  // Tắt trạng thái loading khi đã xong\r\n      }\r\n    };\r\n\r\n    verifyToken();  // Gọi hàm kiểm tra token\r\n    loadAndApplyTheme();  // Áp dụng giao diện khi trang được tải\r\n\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize(); // Thiết lập giá trị ban đầu\r\n    return () => window.removeEventListener('resize', handleResize);\r\n\r\n\r\n  }, [navigate, dispatch]);\r\n\r\n  // Hàm chọn phòng hoặc người dùng\r\n  const handleSelectView = () => {\r\n    if (currentView === 'chat')\r\n      setCurrentView('room')\r\n    else setCurrentView('chat')\r\n\r\n  };\r\n  if (loading) {\r\n    return <div>Vui lòng chờ...</div>;  // Hiển thị loading trong khi chờ kết quả từ checkToken\r\n  }\r\n  return (\r\n    <div className=\"container-fluid h-100 messaging-page\">\r\n      <div className=\"row h-100\">\r\n        {/* Giao diện máy tính và máy tính bảng */}\r\n        {!isMobile ? (\r\n          <>\r\n            {/* Phần bên trái: Room */}\r\n            <div className=\"col-5 p-0\">\r\n              <Room />\r\n            </div>\r\n            {/* Phần bên phải: ChatList */}\r\n            <div className=\"col-7 p-0\">\r\n              <ChatList />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          // Giao diện điện thoại\r\n          <>\r\n            {currentView === 'room' ? (\r\n              // Hiển thị Room trên điện thoại\r\n              <div className=\"col-12 p-0\">\r\n                <Room\r\n                  handleSelectView={handleSelectView}\r\n                  isMobile={isMobile}\r\n                />\r\n              </div>\r\n            ) : (\r\n              // Hiển thị ChatList khi đã chọn phòng trên điện thoại\r\n              <div className=\"col-12 p-0\">\r\n                <ChatList\r\n                  handleSelectView={handleSelectView}\r\n                  isMobile={isMobile}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagingPage;\r\n","//urls.js\r\nmodule.exports = {\r\n  //socket server\r\n  //http://localhost:1002\r\n  socketServer: 'https://backendvmess.onrender.com',\r\n\r\n  //Lấy danh sách tin nhắn của phòng\r\n  getMessagesByRoomId: (roomId) => `https://backendvmess.onrender.com/${roomId}/messages`,\r\n  // đăng nhập\r\n  login: 'https://backendvmess.onrender.com/login',\r\n  //đăng nhập bằng google\r\n  googleLogin: 'https://backendvmess.onrender.com/googleLogin',\r\n  // đăng ký\r\n  register: 'https://backendvmess.onrender.com/register',\r\n  //xác thực mã code đăng ký email\r\n  verifyCode: \"https://backendvmess.onrender.com/verifyCode\",\r\n  //yêu cầu quên mật khẩu\r\n  forgotPassword: \"https://backendvmess.onrender.com/forgotPassword\",\r\n  //xác thực mã quên mật khẩu\r\n  verifyResetCode: \"https://backendvmess.onrender.com/verifyResetCode\",\r\n  //đổi mật khẩu mới cho chức năng quên mật khẩu\r\n  resetPassword: \"https://backendvmess.onrender.com/resetPassword\",\r\n  // đăng xuất\r\n  logout: 'https://backendvmess.onrender.com/logout',\r\n\r\n\r\n  // kiểm tra token trước khi vào trang\r\n  checkToken: 'https://backendvmess.onrender.com/checkToken',\r\n  // yêu cầu lấy lại access token\r\n  refreshToken: 'https://backendvmess.onrender.com/refreshToken',\r\n\r\n  // Lấy danh sách phòng chat của người dùng\r\n  getUserRooms: 'https://backendvmess.onrender.com/getUserRooms',\r\n  // Tìm kiếm người dùng\r\n  searchUser: 'https://backendvmess.onrender.com/searchUser',\r\n  // Tạo phòng chat\r\n  createRoom: 'https://backendvmess.onrender.com/createRoom',\r\n\r\n  // Sửa tin nhắn\r\n  editMessageById: (messageId) => `https://backendvmess.onrender.com/editMessage/${messageId}`,\r\n  // Xoá tin nhắn\r\n  deleteMessageById: (messageId) => `https://backendvmess.onrender.com/deleteMessage/${messageId}`,\r\n\r\n  //đổi ảnh người dùng\r\n  updateProfilePicture: 'https://backendvmess.onrender.com/updateProfilePicture',\r\n  // đổi tên người dùng\r\n  updateUserName: 'https://backendvmess.onrender.com/updateUserName',\r\n  // đổi mật khẩu người dùng\r\n  changePassword: 'https://backendvmess.onrender.com/changePassword',\r\n};","import axios from 'axios';\r\nimport { getCookie, setCookie } from '../utils/cookie';\r\n\r\nconst url = require('../urls');\r\n\r\nconst CheckToken = async () => {\r\n    try {\r\n        const response = await axios.post(\r\n            url.checkToken,\r\n            {}, // Body request trống vì chỉ cần header\r\n            {\r\n                headers: {\r\n                    'Authorization': getCookie('accessToken') // Truyền token vào header\r\n                }\r\n            }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            return { success: true, user: response.data.user }; // Trả về kết quả và dữ liệu người dùng\r\n        }\r\n    } catch (err) {\r\n        if (err.response) {\r\n            if (err.response.status === 400 || err.response.status === 401) {\r\n                const result = await RefreshToken();\r\n\r\n                if (!result.success) {\r\n                    return { success: false };\r\n                } else {\r\n                    return { success: true, user: result.user };\r\n                }\r\n\r\n            } else if (err.response.status === 500) {\r\n                return { success: false };\r\n            }\r\n        } else {\r\n            return { success: false };\r\n        }\r\n    }\r\n    return { success: false }; // Mặc định trả về false nếu có lỗi\r\n};\r\n\r\nconst RefreshToken = async () => {\r\n    try {\r\n        const response = await axios.post(url.refreshToken, {}, { withCredentials: true });\r\n        if (response.status === 200) {\r\n            setCookie('accessToken', response.data.accessToken, 15);\r\n            return { success: true, user: response.data.user };\r\n        }\r\n    } catch (err) {\r\n        if (err.response) {\r\n            if (err.response.status === 400 || err.response.status === 500) {\r\n                return { success: false };\r\n            }\r\n        }\r\n        return { success: false };\r\n    }\r\n};\r\n\r\nexport { CheckToken, RefreshToken };\r\n","function getCookie(cookieName) {\r\n  const name = cookieName + \"=\";\r\n  const decodedCookie = decodeURIComponent(document.cookie);\r\n  const cookieArray = decodedCookie.split(\";\");\r\n\r\n  for (let i = 0; i < cookieArray.length; i++) {\r\n    let cookie = cookieArray[i];\r\n    while (cookie.charAt(0) === \" \") {\r\n      cookie = cookie.substring(1);\r\n    }\r\n    if (cookie.indexOf(name) === 0) {\r\n      return cookie.substring(name.length, cookie.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nfunction setCookie(cookieName, cookieValue, expirationMinutes) {\r\n  const expirationDate = new Date();\r\n  expirationDate.setMinutes(expirationDate.getMinutes() + expirationMinutes);\r\n  const expires = `expires=${expirationDate.toUTCString()}`;\r\n  document.cookie = `${cookieName}=${cookieValue}; ${expires}`;\r\n}\r\n\r\n\r\nfunction deleteCookie(cookieName) {\r\n  document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC`;\r\n}\r\nexport { getCookie, setCookie, deleteCookie };","// src/utils/themeUtils.js\r\nexport const applyTheme = (theme) => {\r\n    if (theme === 'dark') {\r\n      document.body.classList.add('dark-mode');\r\n      document.body.classList.remove('light-mode');\r\n    } else if (theme === 'light') {\r\n      document.body.classList.add('light-mode');\r\n      document.body.classList.remove('dark-mode');\r\n    } else {\r\n      // Áp dụng theo cài đặt hệ điều hành\r\n      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      if (prefersDarkMode) {\r\n        document.body.classList.add('dark-mode');\r\n        document.body.classList.remove('light-mode');\r\n      } else {\r\n        document.body.classList.add('light-mode');\r\n        document.body.classList.remove('dark-mode');\r\n      }\r\n    }\r\n  };\r\n  \r\n  export const loadAndApplyTheme = () => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme) {\r\n      applyTheme(savedTheme);\r\n    } else {\r\n      const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      applyTheme(prefersDarkMode ? 'dark' : 'light');\r\n    }\r\n  };\r\n  "],"names":["url","require","_ref","searchText","setIsSearching","navigate","useNavigate","dispatch","useDispatch","users","setUsers","useState","currentPage","setCurrentPage","totalPages","setTotalPages","loading","setLoading","hasMore","setHasMore","titleError","setTitleError","scrollContainerRef","useRef","fetchUsers","async","page","arguments","length","undefined","append","isRetry","trim","response","axios","get","searchUser","params","search","limit","headers","Authorization","getCookie","newUsers","data","prev","error","status","message","RefreshToken","success","useEffect","debouncedFetch","_","cancel","handleScroll","container","current","scrollTop","clientHeight","scrollHeight","addEventListener","removeEventListener","_jsxs","ref","style","height","maxHeight","overflowY","children","_jsx","map","user","className","onClick","targetUserId","userName","profilePicture","email","post","createRoom","setChatInfo","roomId","handleCreateRoom","userId","src","alt","roomName","role","room","handleSelectView","isMobile","chatInfo","useSelector","state","chat","image","console","log","div","lastMessageTime","lastMessage","unreadMessagesCount","socket","initializeSocket","reconnect","accessToken","disconnect","io","socketServer","query","token","transports","on","window","location","href","isSearching","setSearchText","rooms","setRooms","title","setTitle","fetchUserRooms","isAutoLoadChat","getUserRooms","newRooms","socketInstance","off","inputRef","handleBackClick","BsArrowLeft","size","type","placeholder","value","onChange","e","target","onFocus","focus","UserSearch","RoomItem","UserProfile","userInfo","auth","setError","confirmChangePicture","setConfirmChangePicture","confirmChangeUserName","setConfirmChangeUserName","confirmChangePassword","setConfirmChangePassword","setSuccess","hinhAnh","setHinhAnh","setUserName","oldPassword","setOldPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","urlAnh","setUrlAnh","ImageUpload","fileInputRef","width","textAlign","margin","handleChooseFileClick","click","onDrop","event","preventDefault","file","dataTransfer","files","startsWith","reader","FileReader","onload","readAsDataURL","onDragOver","color","accept","display","position","objectFit","borderRadius","border","boxShadow","BsPencilFill","bottom","right","cursor","File","URL","createObjectURL","fontWeight","marginBottom","required","disabled","fetchUpdateProfilePicture","formData","FormData","updateProfilePicture","fetchUpdateUserName","put","updateUserName","fetchChangePassword","changePassword","withCredentials","handleSubmit","logout","deleteCookie","handleLogout","FaSignOutAlt","activeTab","setActiveTab","RoomList","BsChatDots","BsGear","MessageForm","setMessage","onSubmit","emit","BsPaperclip","autoFocus","BsFillSendFill","messageAction","setMessageAction","handleEditMessage","handleDeleteMessage","userLogin","isSelected","messageId","createdAt","senderId","alert","maxWidth","wordBreak","messageContent","editedAt","fontSize","BsPencil","BsTrash","messages","setMessages","joinRoom","setJoinRoom","hasLoadedRef","fetchGetMessagesByRoomId","getMessagesByRoomId","newMessages","allMessages","Map","msg","values","twoMember","newMessage","setTimeout","prevMessages","newMessageContent","filter","result","prompt","fetchEditMessage","updatedMessage","editMessageById","fetchDeleteMessage","delete","deleteMessageById","BsCircleFill","reverse","ChatItem","MessagingPage","currentView","setCurrentView","selectedRoom","setSelectedRoom","setIsMobile","CheckToken","login","verifyToken","loadAndApplyTheme","handleResize","innerWidth","_Fragment","Room","ChatList","module","exports","googleLogin","register","verifyCode","forgotPassword","verifyResetCode","resetPassword","checkToken","refreshToken","err","setCookie","cookieName","name","cookieArray","decodeURIComponent","document","cookie","split","i","charAt","substring","indexOf","cookieValue","expirationMinutes","expirationDate","Date","setMinutes","getMinutes","expires","toUTCString","applyTheme","theme","body","classList","add","remove","matchMedia","matches","savedTheme","localStorage","getItem","prefersDarkMode"],"sourceRoot":""}